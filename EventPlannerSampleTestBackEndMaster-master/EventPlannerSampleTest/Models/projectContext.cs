// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace EventPlannerSampleTest.Models
{
    public partial class projectContext : DbContext
    {
        public projectContext()
        {
        }

        public projectContext(DbContextOptions<projectContext> options)
            : base(options)
        {
        }

        public virtual DbSet<bookings> bookings { get; set; }
        public virtual DbSet<clients> clients { get; set; }
        public virtual DbSet<Events> events { get; set; }
        public virtual DbSet<requestresponse> requestresponse { get; set; }
        public virtual DbSet<services> services { get; set; }
        public virtual DbSet<user> user { get; set; }
        public virtual DbSet<vendor> vendor { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseMySql("server=localhost;database=project;uid=ghost;pwd=13118575", Microsoft.EntityFrameworkCore.ServerVersion.Parse("8.0.30-mysql"));
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("utf8mb4_0900_ai_ci")
                .HasCharSet("utf8mb4");

            modelBuilder.Entity<bookings>(entity =>
            {
                entity.HasKey(e => e.booking_id)
                    .HasName("PRIMARY");

                entity.HasOne(d => d.client)
                    .WithMany(p => p.bookings)
                    .HasForeignKey(d => d.client_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("bookings_ibfk_1");

                entity.HasOne(d => d._event)
                    .WithMany(p => p.bookings)
                    .HasForeignKey(d => d.event_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("bookings_ibfk_2");

                entity.HasOne(d => d.request)
                    .WithMany(p => p.bookings)
                    .HasForeignKey(d => d.request_id)
                    .HasConstraintName("request_id");

                entity.HasOne(d => d.vendor)
                    .WithMany(p => p.bookings)
                    .HasForeignKey(d => d.vendor_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("bookings_ibfk_3");
            });

            modelBuilder.Entity<clients>(entity =>
            {
                entity.HasKey(e => e.client_id)
                    .HasName("PRIMARY");

                entity.HasOne(d => d.email)
                    .WithMany(p => p.clients)
                    .HasForeignKey(d => d.email_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("clients_ibfk_1");
            });

            modelBuilder.Entity<Events>(entity =>
            {
                entity.HasKey(e => e.event_id)
                    .HasName("PRIMARY");
            });

            modelBuilder.Entity<requestresponse>(entity =>
            {
                entity.HasKey(e => e.request_id)
                    .HasName("PRIMARY");

                entity.HasOne(d => d.clients)
                    .WithMany(p => p.requestresponse)
                    .HasForeignKey(d => d.clients_id)
                    .HasConstraintName("client_id");

                entity.HasOne(d => d.service)
                    .WithMany(p => p.requestresponse)
                    .HasForeignKey(d => d.service_id)
                    .HasConstraintName("service_id");

                entity.HasOne(d => d.vendor)
                    .WithMany(p => p.requestresponse)
                    .HasForeignKey(d => d.vendor_id)
                    .HasConstraintName("vendor_id");
            });

            modelBuilder.Entity<services>(entity =>
            {
                entity.HasKey(e => e.service_id)
                    .HasName("PRIMARY");
            });

            modelBuilder.Entity<user>(entity =>
            {
                entity.HasKey(e => e.email_id)
                    .HasName("PRIMARY");

                entity.Property(e => e.sr_no).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<vendor>(entity =>
            {
                entity.HasKey(e => e.vendor_id)
                    .HasName("PRIMARY");

                entity.HasOne(d => d.email)
                    .WithMany(p => p.vendor)
                    .HasForeignKey(d => d.email_id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("vendor_ibfk_1");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}